<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc5245 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5245.xml">
<!ENTITY rfc5389 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5389.xml">
<!ENTITY rfc4594 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4594.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="no" ?>
<?rfc colonspace='yes' ?>
<?rfc tocindent='yes' ?>
<?rfc comments='yes' ?>
<?rfc inline='yes' ?>

<?rfc needLines="yes" ?>
<rfc category="std" docName="draft-martinsen-stun-based-bw-mngmt-latest" ipr="trust200902">
  <front>
    <title>STUN Based Bandwith Managment</title>


    <author fullname="Paal-Erik Martinsen" initials="P.E" surname="Martinsen">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>Philip Pedersens vei 20</street>
          <city>Lysaker</city>
          <region>Akershus</region>
          <code>1366</code>
          <country>Norway</country>
        </postal>
        <email>palmarti@cisco.com</email>
      </address>
    </author>
    <author fullname="Herb Wildfeuer" initials="H" surname="Wildfeuer">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>821 Alder Drive</street>
          <city>Milpitas</city>
          <region>California</region>
          <code>95035</code>
          <country>United States</country>
        </postal>
        <email>hwildfeu@cisco.com</email>
      </address>
    </author>

    <date/>

    <abstract>
      <t>
        This draft describes a mechanism for information exchange
        between an application and the network.  The information
        provided from the application to the network MAY be used by a
        network element in the path to modify its behavior to improve
        application quality of experience (QoE).  Likewise, the
        information provided by the network to the application MAY be
        used by the application to modify its behavior to optimize for
        QoE.
      </t>
      <t>
        The information provided from the application to the network
        can also be useful for middleboxes that are responsible for
        security at edges of network (e.g. firewalls) or other
        middleboxes in determining how to treat the packets delivered
        from this application.
      </t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described
        in <xref target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>
        In the context of Content, Mobile, Fixed Service, Service
        Providers, Enterprise and Private networks have a need to
        prioritize packet flows end-to-end. These flows are often
        dynamic, time-bound, encrypted, peer-to-peer, possibly
        asymmetric, and might have different priorities depending on
        network conditions, direction, time of the day, dynamic user
        preferences and other factors. These factors may be time
        variant, and thus need to be signalled. Moreover, in many
        cases of peer-to-peer communication, flow information is known
        only to the endpoint. These considerations, coupled with the
        trend to use encryption for browser-to-browser communication
        <xref target="I-D.ietf-rtcweb-security-arch"/>, imply that
        access lists, deep packet inspection and other static
        prioritization methods cannot be employed successfully to
        prioritize packet flows.
      </t>
      <t>
        The lack of congestion control in UDP may lead to problems as
        described in <xref target="I-D.eggert-tsvwg-rfc5405bis"/>. The
        mechanism described in this document can be used to introduce
        fairness and congestion control for UDP streams.
      </t>
      <t>
        There is a need for a solution that is easy for the
        application developer to use. That means consistent behavior
        on all supported platforms and preferably without need of
        administrative privileges to set and read values. The solution
        also needs to be able to cross administrative domains without
        the risk of being rewritten.
        <cref anchor="Q1" source="palmarti">
          This draft will only offer
          tamper detection of some of the values. Further discussion
          regarding the incentive to lie is needed.
        </cref>
      </t>
      <!--
      <t>
        Todo: Say why we want to have a simpler solution than <xref
        target="RFC6679"/>.
      </t>
      -->
      <t>
        This draft describes how these problems can be solved by
        defining a few strictly defined STUN <xref target="RFC5389"/>
        attributes which can be added to any STUN message the client
        wants to send. STUN messages are typically sent during the ICE
        <xref target="RFC5245"/> connectivity check phase when the
        media session is established, or when keep-alive STUN messages
        are sent after the session is established. The application is
        not limited to those two scenarios, if some communication
        between application and network is needed it can choose to do
        so at any time.
      </t>
      <t>
        Devices on the media path can use the information in the STUN
        attributes to prioritize the flow, perform traffic
        engineering, provide network analytics or as a gateway to
        existing methods for prioritizing flows (DSCP
        <xref target="RFC2474"/>). Applications can use information in
        network status attribute to influence rate stating points or
        rate adaption mechanisms.
      </t>

    </section>

    <section title="General Usage">
      <t>
        This draft defines two attributes that can be added to a
        STUN message; ENF-FLOW-DESCRIPTION and ENF-NETWORK-STATUS.
        See <xref target="new_attributes" /> for
        the formal description. It is RECOMMENDED to add them to a
        STUN request response pair, especially if the ENF_NETWORK-STATUS
        attribute is in use. This allows the information gathered to
        be sent back to the requesting agent in the the STUN response.
      </t>
      <t>
        The ENF-FLOW-DESCRIPTION attribute
        MUST be added before any INTEGRITY attribute. It is
        RECOMMENDED to only add the attribute to STUN messages
        containing a INTEGRITY attribute as this prevents tampering
        with the content of the attribute.
      </t>
      <t>
        If the client wants to receive feedback from the network it
        must add a null ENF-NETWORK-STATUS attribute. A null
        ENF-NETWORK_STATUS attribute is created by filling in the all the
        fields in the attribute with 0x0 values. This attribute MUST
        be added after the INTEGRITY attribute, as on-path devices may
        write information into this attribute. Having a readily
        available attribute to write into will save the the on-path
        device from growing buffers to add their own attribute. On
        path devices SHOULD not add their own ENF-NETWORK-STATUS attribute
        (or any other STUN attribute).
      </t>
      <t>
        If an agent receives a STUN request with a ENF-NETWORK-STATUS
        attribute after the INTEGRITY attribute, it should copy the
        content into a new ENF-NETWORK-STATUS attribute and add it before
        the INTEGRITY attribute when sending the STUN response. A new
        null ENF-NETWORK-STATUS attribute can be added after the INTEGRITY
        attribute. New STUN attributes described in this draft can
        also be added describing the stream in this direction.
      </t>
      <t>
        If an agent receives a STUN response with a ENF-NETWORK-STATUS
        attribute before the INTEGRITY attribute, this describes the
        stream in the upstream direction. A ENF-NETWORK-STATUS attribute
        after the INTEGRITY attribute describes the stream in the
        downstream direction.
      </t>
      <t>
        <cref anchor="Q3" source="palmarti">Do we want to restrict
          this to req/resp or do we want to allow for the attributes
          to be added in this fashion for indications as well?</cref>
      </t>
      <t>
        <figure title="DISCUSS example flow">
        <artwork><![CDATA[
  Alice                router1            router2              Bob
   |                      |                   |                  |
   |Binding_Request       |                   |                  |
(1)|--------------------->|(2)                |                  |
   |                      |                   |                  |
   |                      |Binding_Request    |                  |
   |                      |------------------------------------->|
   |                      |                   |                  |
   |                      |                   | Binding_Response |
   |                      |                   |<-----------------|(3)
   |                      |  Binding_Response |                  |
   |<-----------------------------------------|(4)               |
   |(5)                   |                   |                  |

]]></artwork>
        </figure>
        <list style="numbers">
          <t>
            Alice creates a Binding Request, adds the ENF-FLOW-DESCRIPTION
            attribute before the
            INTEGRITY attribute and a single null ENF-NETWORK-STATUS
            attribute after the INTEGRITY attribute.
          </t>
          <t>
            Router1 inspects the STUN Request message and reads the
            ENF-FLOW-DESCRIPTION
            attribute and the information it contain. It then
            updates the ENF-NETWORK-STATUS attribute with any information
            the router have. It then forwards the request.
          </t>
          <t>
            Bob processes the STUN Request. When Bob builds the
            response, it copies the ENF-NETWORK-STATUS attribute into the
            STUN Response before the INTEGRITY check and adds new null
            ENF-NETWORK-STATUS attribute after the INTEGRITY
            attribute. Bob then transmits the message.
          </t>
          <t>
            Router2 (first network element that understand the stun packets described here for the downstream
            direction) inspects the Response message, reads the ENF-FLOW-DESCRIPTION
            attribute and MAY alter the NETWORK-STATUS attribute
            located after the INTEGRITY attribute. It then transmits
            the message.
          </t>
          <t>
            When Alice receives the STUN Response, she can extract the
            ENF-FLOW-DESCRIPTIONS
            attribute and the two ENF-NETWORK-STATUS attributes to get a
            complete picture of what the remote agent is sending and
            how the status of both the upstream and downstream path.
          </t>
        </list>
      </t>
    </section>

    <section title="Network Processing">
      <t>
        This section describes the processing of STUN packets containing BW management information by
        network devices.
      </t>
      <section title="Packet Processing by Network Device">
        <t>
          Network devices are said to support the mechanisms described in this document if they perform
          inspection of packets being forward or switched in order to
          identify an STUN packet containing the ENF-FLOW-DESCRIPTION and ENF_NETWORK-STATUS attributes.  These devices will also be
          able to read/write STUN attributes to/from this packet.  It
          is not required that every network device in the path
          support the mechanisms described in this document.  It is expected that it will have the
          most value being implemented at certain points in the
          network (PIN's) such as WAN edge devices, wireless access
          devices, and Internet gateways.
        </t>
        <t>
          Network devices that support the mechanism described here MAY utilize the
          information provided by the application in the STUN
          attributes to modify their behavior.  These include the
          attributes defined in this document with the exception of
          the ENF-NETWORK-STATUS attribute.  The ENF-NETWORK-STATUS attribute
          SHOULD NOT be used by the capable network device to
          modify its behavior.  The intent of the NETWORK-STATUS
          attribute is for the application to modify its behavior.
        </t>
        <t>
          If the ENF-NETWORK-STATUS attributes exists in a STUN packet
          after an INTEGRITY attribute, the capable network
          device MUST process it as described in this section.
          ENF-NETWORK-STATUS attributes that exist before the INTEGRITY
          attribute MUST NOT be modified by the network device.  The
          modifications to the NETWORK-STATUS attribute are:
          <list style="symbols">
            <t> Update the Node Cnt field in the attribute.  The
              device SHALL increment this field by one unless it is at
              its maximum (saturated) value.  If the field is at its
              maximum value, the device SHALL NOT modify this field.
            </t>
            <t>
              Overwrite the attribute CS bit if the value at this
              device is "worst" than the current value.  In other
              words, only write to this bit if the device is
              experiencing congestion on relevant queues/interfaces
              for this flow AND the current value of this field is 0
              (Off).
            </t>
          </list>
        </t>
        <t>
          The determination of congestion at a device is out of the
          scope of this document.  Setting of CS bit to On by the
          device is meant to provide direct feedback to the
          application of potential or current loss of packets in its
          flow (s).  The application can then react to this indication
          by altering its encoding of information in the packet to
          deal with congestion/packet loss, e.g. reduce its encoding
          rate or switch to embedded encoding.  Devices SHOULD ensure
          that the DISCUSS capable applications that do react to
          congestion notification by reducing their transmission rate
          be treated properly to ensure fairness with non reacting
          applications (i.e. ensure fairness for well behaving
          applications).
        </t>
        <t>
          The STUN packet SHOULD experience minimal extra
          processing delay through the capable network device
          relative to non-STUN packets in the flow.  The
          STUN packet MAY be placed out of order in the packet flow,
          but SHOULD NOT be delayed more than a few packet interval
          times.
        </t>
      </section>
      <section title="Interaction with DSCP">
        <t>
          One of the information bits that may be added to the STUN packet
          by the application is the TYPE field in the ENF-FLOW-DESCRIPTION attribute.
          This field is compatible
          with the use of DSCP (or other priority markings) at the
          networking layer as described in this section.
        </t>
        <t>
          Since transport layer markings may be modified by middle
          boxes or devices in the path or at the interface of the
          application itself due to the lack of support in the OS
          network stack, the TYPE field in the ENF-FLOW-DESCRIPTION attribute can be used as
          a mechanism for ensuring proper QoS treatment through
          multiple domains.
        </t>
        <t>
          <xref target="I-D.ietf-tsvwg-rtcweb-qos"/> provides the
          recommended DSCP values for webrtc enabled browsers to use
          for various classes of traffic.
        </t>
      </section>
    </section>

    <section title="Interaction with ICE">
      <t>
        An ICE connectivity check is performed by sending a STUN
        Binding indication. Prior to sending the agent can add one
        ENF-FLOW-DESCRIPTION attribute. This
        is to avoid unnecessary large STUN packets during the
        connectivity checks. If the connectivity check is sent on a
        5-tuple that multiplexes different types of media and more
        detailed information wants to be signalled it should be done
        after the connectivity check phase is finished.
      </t>
      <t>
        This limits the information the STUN messages are able to
        convey during the connectivity checks, but also avoids adding
        network confusion with ENF-NETWORK-STATUS attributes describing
        different paths that never going to be utilized.
      </t>
      <t>
        <cref anchor="Q4" source="palmarti">
          Problem with consent freshness if not based on STUN.
        </cref>
      </t>

    </section>

    <section title="New STUN attributes" anchor="new_attributes" >
      <t>
        This STUN extension defines the following new attributes:
      </t>
      <figure>
        <artwork align="left"><![CDATA[
      0xXXX0: ENF-FLOW-DESCRIPTION
      0xXXX1: ENF-NETWORK-STATUS
        ]]></artwork>
      </figure>

      <section title="ENF-FLOW-DESCRIPTION">
        <t>
          This attribute have a length that are multiples of 4 (32) so
          no padding is necessary.
        </t>

        <figure anchor="ENF-FLOW-DESCRIPTION_attr" title="ENF-FLOW-DESCRIPTION Attribute">
          <artwork align="left"><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| TYPE  | BANDWIDTH-MAX     (Kbps)      | RESERVED              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      ]]></artwork>
        </figure>
        <t>
          <list style="hanging">
            <t hangText="TYPE:"> TYPE is a 4 bit value
              defined in <xref target="I-D.ietf-tsvwg-rtcweb-qos"/>
            </t>
            <t hangText="BANDWIDTH-MAX:"> Is a 16 bit value describing the max sending bitrate.
            </t>
          </list>
        </t>
      </section>

      <section title="ENF-NETWORK-STATUS">
        <t>
          This attribute have a length that are multiples of 4 (32) so
          no padding is necessary. The values are kept in the same
          attribute to make it easier for the network element to
          process it. Only one attribute, with static placement of the
          fields.
          <cref anchor="Q5" source="palmarti">
            Does this matter? Could we have several attributes with
            possible different ordering without any problem for the
            network element?
          </cref>
        </t>
        <t>
          This attribute MUST be added after any INTEGRITY attribute
          in the STUN message. Values in this attribute can be updated
          along the network path by nodes that are not able to
          regenerate a correct INTEGRITY attribute.
        </t>
        <figure anchor="enf_network_status_attr" title="ENF-NETWORK-STATUS Attribute">
          <artwork align="right"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|C|    Flags    | Node Cnt      |             TBD               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Up MAX Bitrate  (kbps)      | Down MAX Bitrate  (kbps)      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


      ]]></artwork>
        </figure>
        <t>
          <list style="hanging">
            <t hangText="C:"> Congestion Status.  This bit is set to
            indicate that there is congestion at the network device's
            relevant queues/interfaces for this flow.  The network
            element should set this bit to 1 (On) if it is
            experiencing congestion.  This bit is set to 0 (off) when
            the attribute is created by the application.  The
            application that sees this bit set might act on it by
            doing some rate adaption or similar action.
            </t>
            <t hangText="Flags:"> 7 more bits available for flags.
            </t>
            <t hangText="Node Cnt:"> Numbers of nodes that supports
            DISCUSS in the network path. Any router on the path that
            understands DISCUSS should increase this number.  This
            field is set to 0 when the attribute is created by the
            application.
            </t>
            <t hangText="TBD:"> 16 more bits available for useful info.
            </t>
            <t hangText="Up MAX Bitrate:"> Available MAX bit-rate the
            router is able to handle for the 5-tuple in the UP
            direction. (Same direction as the packet is moving)
            </t>
            <t hangText="Down MAX Bitrate:"> Available MAX bit-rate the
            router is able to handle for the 5-tuple in the DOWN
            direction. (Opposite direction as the packet is moving)
            </t>
          </list>
        </t>
      </section>

    </section>

    <section title="IANA Considerations">
      <t>
        IANA is requested to add the following attributes to the <xref
        target="iana-stun">STUN attribute registry</xref>,
        <list style="symbols">
          <t>
            0xXXX0: ENF-FLOW-DESCRIPTION      (0xXXX0, in the comprehension-optional range)
          </t>
          <t>
            0xXXX1: ENF-NETWORK-STATUS   (0xXXX1, in the comprehension-optional range)
          </t>
        </list>
      </t>
    </section>

    <section title="Security Considerations">
      <t>
        Due to the security implications described in <xref
        target="I-D.thomson-mmusic-ice-webrtc"></xref> where large
        STUN packet are used to amplify an attack, keeping the added
        STUN attributes small is a important design consideration.
      </t>
      <t>
        To avoid unwanted information leakage the new defined STUN
        attributes defined in this draft are strictly defined. No more
        information should be leaked that an on-path device could
        learn by observing the stream over time or do some deep packet
        analysis. This draft would benefit from more discussions on
        this topic.
      </t>
      <t>
        It is also worth noticing that the STUN attributes defined
        should be treated as hints, and more work is needed regarding
        how to deal with misbehaving clients or network devices.
      </t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>
        Authors would like to thank Dan Wing, Anca Zamfir, Jon Snyder
        and Cullen Jennings for their comments and review.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &rfc2119;
      <?rfc include="reference.RFC.2474"?>
      <?rfc include="reference.RFC.5389"?>
      <?rfc include="reference.RFC.5245"?>
      <!--<?rfc include="reference.RFC.6679"?>-->

    </references>

    <references title="Informational References">
      <?rfc include='reference.I-D.ietf-rtcweb-security-arch' ?>
      <?rfc include='reference.I-D.thomson-mmusic-ice-webrtc' ?>
      <?rfc include='reference.I-D.ietf-tsvwg-rtcweb-qos' ?>
      
      <?rfc include='reference.I-D.eggert-tsvwg-rfc5405bis' ?>

      <reference anchor="iana-stun"
                 target="http://www.iana.org/assignments/stun-parameters/stun-pa rameters.xml">
        <front>
          <title>IANA: STUN Attributes</title>
          <author fullname="IANA" surname="IANA">
            <organization></organization>
          </author>
          <date month="April" year="2011" />
        </front>
      </reference>

      <!--<?rfc include='reference.I-D.muthu-behave-consent-freshness' ?>-->
    </references>
    <!--
      -->
  </back>
</rfc>
